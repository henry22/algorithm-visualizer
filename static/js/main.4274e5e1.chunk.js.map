{"version":3,"sources":["utility/Util.js","components/Visualizer.js","components/Navbar/Navbar.js","reducers/array/index.js","reducers/algorithm/index.js","reducers/sorted/index.js","components/Navbar/NavbarContainer.js","components/Chart/Chart.js","components/Body/Body.js","reducers/running/index.js","reducers/isEnd/index.js","reducers/bubbleSort/index.js","reducers/swapper/index.js","algorithms/sorting/bubbleSort.js","reducers/mergeSort/index.js","algorithms/sorting/mergeSort.js","reducers/quickSort/index.js","algorithms/sorting/quickSort.js","components/Body/BodyContainer.js","components/Main.js","App.js","serviceWorker.js","reducers/index.js","store.js","index.js"],"names":["generateRandomArray","length","randomItems","Set","size","randomNumber","Math","floor","random","add","Array","from","springAnimation","type","damping","stiffness","Navbar","props","algorithm","updateAlgorithm","handleClick","AppBar","position","Toolbar","Typography","variant","Grid","item","xs","FormControl","component","RadioGroup","row","aria-label","name","FormControlLabel","value","control","Radio","label","onClick","setArray","createAction","array","handleActions","SET_ARRAY","state","payload","setAlgorithm","SET_ALGORITHM","setCurrentSorted","currentSorted","SET_CURRENT_SORTED","concat","connect","dispatch","generateArray","liStyle","marginTop","marginBottom","marginLeft","marginRight","borderRadius","listStyle","color","fontSize","textAlign","alignItems","display","Chart","currentSwapper","currentBubbleSortTwo","currentMergeSort","currentQuickSort","pivot","liHeight","window","innerHeight","style","justifyItems","height","map","number","index","backgroundColor","includes","div","key","animate","scale","layoutTransition","background","width","margin","Body","useState","inputType","setInputType","speed","setSpeed","customNumbers","setCustomNumbers","React","isOpen","text","open","setOpen","generateCustomArray","isRunning","isEnding","sort","close","customRef","useRef","cursor","useEffect","delayHandleChange","useCallback","debounce","newValue","handleClose","Collapse","in","top","Alert","severity","action","IconButton","Container","maxWidth","container","justify","maxHeight","min","max","step","disabled","onChange","e","target","justifyContent","TextField","id","placeholder","ref","input","split","parseInt","Button","customItems","i","push","submit","InputLabelProps","shrink","newSpeed","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","message","Fragment","setRunning","SET_RUNNING","setEnding","SET_ENDING","setCurrentBubbleTwo","SET_CURRENT_BUBBLE_TWO","setCurrentSwapper","SET_CURRENT_SWAPPER","bubbleSort","stateArray","slice","toDispatch","sorted","round","temp","handleDispatch","num","setTimeout","dispatchFunction","shift","setCurrentMerge","SET_CURRENT_MERGE","mergeSort","finalArray","mergeSortHelper","start","end","obj","half","first","second","indexHalf","actualFirst","actualSecond","isFinalMerge","sortedArray","indexToPush","forEach","subArr","actualSort","currentToDispatch","setCurrentQuickSort","setPivot","SET_CURRENT_QUICK_SORT","SET_PIVOT","quickSort","quickSortHelper","left","right","doSort","Main","App","className","Boolean","location","hostname","match","rootReducer","combineReducers","createStore","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.4274e5e1.chunk.js","sourcesContent":["export function generateRandomArray(length) {\n  const randomItems = new Set()\n\n  while (randomItems.size < length) {\n    const randomNumber = Math.floor(Math.random() * 101)\n    randomItems.add(randomNumber)\n  }\n\n  return Array.from(randomItems)\n}\n\nexport const springAnimation = {\n  type: \"spring\",\n  damping: 100,\n  stiffness: 1000\n}","import React, { useState } from 'react';\nimport { Grid, CssBaseline, Typography, Container, Slider, Snackbar, Radio, RadioGroup, FormControlLabel, FormControl, Button, TextField, AppBar, Toolbar } from '@material-ui/core';\n\nimport { uid } from 'react-uid';\nimport { generateRandomArray } from '../utility/Util';\nimport { getAlgoFunction } from '../utility/Sorting';\n\nconst Visualizer = () => {\n  const [speed, setSpeed] = useState(1000);\n  const [numItems, setNumItems] = useState(5);\n  const [isSorted, setIsSorted] = useState(false);\n  const [algoFunction, setAlgoFunction] = useState('BubbleSort');\n  const [inputType, setInputType] = useState('DefaultInput');\n  const [process, setProcess] = useState(false);\n  const [items, setItems] = useState(generateRandomArray(numItems));\n  const [customNumbers, setCustomNumbers] = useState([]);\n  const minItems = 2;\n  const maxItems = 30;\n\n  const changeSpeed = (e) => {\n    const newSpeed = e.target.value;\n    if (newSpeed < 0 || newSpeed > 1000) {\n      alert('Speed should be between 0 and 1000 ms');\n    } else {\n      setSpeed(newSpeed);\n    }\n  }\n\n  const customInput = (e) => {\n    let input = e.target.value.split(' ').filter((number) => parseInt(number));\n    setCustomNumbers(input);\n  }\n\n  const submit = () => {\n    setItems([]);\n    let customItems = [];\n    for (let i = 0; i < customNumbers.length; i++) {\n      const value = customNumbers[i];\n      customItems.push({\n        id: uid(Math.random()),\n        itemValue: Number(value),\n        color: '#2d8ae2',\n        IsBeingSwapped: false\n      });\n    }\n    setItems(customItems);\n  }\n\n  const reset = (num) => {\n    setProcess(false);\n    setAlgoFunction('BubbleSort');\n    setIsSorted(false);\n    setNewItems(num);\n  }\n\n  const resetNumbers = () => {\n    setProcess(false);\n    setIsSorted(false);\n    setAlgoFunction(algoFunction);\n    let randomItems = generateRandomArray(numItems);\n    setItems(randomItems);\n  }\n\n  const setNewItems = (num) => {\n    if (num === numItems) {\n      return;\n    }\n\n    setNumItems(num);\n    let randomItems = generateRandomArray(num);\n    setItems(randomItems);\n  }\n\n  const checkSwappedElements = (itemsPrev, itemsCurrent) => {\n    let newItems = [];\n    // console.log(items, itemsPrev, itemsCurrent)\n    for (let i = 0; i < items.length; i++) {\n      // console.log(itemsPrev[i], itemsCurrent[i])\n      newItems[i] = itemsCurrent[i];\n\n      if (itemsCurrent[i].itemValue !== itemsPrev[i].itemValue) {\n        newItems[i].IsBeingSwapped = true;\n      }\n    }\n    return newItems;\n  }\n\n  const runAlgorithm = () => {\n    const result = getAlgoFunction(algoFunction)(items);\n\n    for (let i = 0; i < result.length; i++) {\n      if (i !== result.length - 1) {\n        let resultItemsWithSwapState =\n          i === 0 ? checkSwappedElements(items, result[i]) : checkSwappedElements(result[i - 1], result[i]);\n        setTimeout(() => {\n          setItems(resultItemsWithSwapState);\n        }, i * speed);\n      } else {\n        setTimeout(() => {\n          setItems(result[i]);\n        }, i * speed);\n      }\n\n      setTimeout(() => {\n        setIsSorted(true);\n      }, result.length * speed);\n    }\n  }\n\n  const handleClose = (reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <AppBar position=\"fixed\">\n        <Toolbar>\n          <Typography variant=\"h6\">Logo</Typography>\n\n          <Grid item xs={12}>\n            <FormControl component=\"fieldset\">\n              <RadioGroup\n                row\n                aria-label=\"algorithm\"\n                name=\"algorithm\"\n                value={algoFunction}\n                onChange={(e) => setAlgoFunction(e.target.value)}\n              >\n                <FormControlLabel value=\"BubbleSort\" control={<Radio />} label=\"BubbleSort\" />\n                <FormControlLabel value=\"InsertionSort\" control={<Radio />} label=\"InsertionSort\" />\n                <FormControlLabel value=\"SelectionSort\" control={<Radio />} label=\"SelectionSort\" />\n                {/* <FormControlLabel value=\"MergeSort\" control={<Radio />} label=\"MergeSort\" />\n                <FormControlLabel value=\"QuickSort\" control={<Radio />} label=\"QuickSort\" /> */}\n              </RadioGroup>\n            </FormControl>\n          </Grid>\n        </Toolbar>\n      </AppBar >\n      <Container fixed style={{ height: '100vh', display: 'flex', alignItems: 'center' }}>\n        <Grid container style={{\n          maxHeight: '500px'\n        }}>\n          {inputType === 'DefaultInput' && (\n            <Grid item xs={12}>\n              <Typography component=\"h4\" variant=\"h4\">\n                Number of items: {numItems}\n              </Typography>\n            </Grid>\n          )}\n\n          {inputType === 'DefaultInput' && (\n            <Grid item xs={12}>\n              <Slider\n                value={typeof numItems === 'number' ? numItems : 2}\n                onChange={(e, newValue) => reset(newValue)}\n                aria-labelledby=\"input-slider\"\n                valueLabelDisplay=\"auto\"\n                min={minItems}\n                max={maxItems}\n              />\n            </Grid>\n          )}\n\n          <Grid item xs={12}>\n            <FormControl component=\"fieldset\">\n              <RadioGroup\n                row\n                aria-label=\"input-type\"\n                name=\"input-type\"\n                value={inputType}\n                onChange={(e) => setInputType(e.target.value)}\n              >\n                <FormControlLabel value=\"CustomInput\" control={<Radio />} label=\"Custom Input\" />\n                <FormControlLabel value=\"DefaultInput\" control={<Radio />} label=\"Default Input\" />\n              </RadioGroup>\n            </FormControl>\n          </Grid>\n          {inputType === 'CustomInput' && (\n            <Grid item xs={12} style={{ display: 'flex', justifyContent: 'center' }}>\n              <Grid item xs={10}>\n                <TextField\n                  id=\"custom_input\"\n                  onChange={customInput}\n                  type=\"text\"\n                  placeholder=\"Insert space separated numbers. ex: 23 7 12 90\"\n                  style={{ width: '100%', marginBottom: '20px' }}\n                />\n              </Grid>\n\n              <Grid item xs={2}>\n                <Button disabled={process} variant=\"contained\" color=\"primary\" onClick={() => submit()}>\n                  Done!\n                </Button>\n              </Grid>\n            </Grid>\n          )}\n\n          <Grid item xs={6} style={{ display: 'flex', justifyContent: 'space-between' }}>\n            <Grid item xs={2}>\n              <Button color=\"secondary\" variant=\"contained\" onClick={resetNumbers}>\n                RESET\n              </Button>\n            </Grid>\n\n            <Grid item xs={2}>\n              <Button\n                disabled={process}\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => runAlgorithm()}\n              >\n                Sort!\n              </Button>\n            </Grid>\n\n            <Grid item xs={2}>\n              <TextField\n                id=\"standard-number\"\n                label=\"Speed (ms)\"\n                type=\"number\"\n                InputLabelProps={{\n                  shrink: true\n                }}\n                value={speed}\n                onChange={changeSpeed}\n              />\n            </Grid>\n          </Grid>\n        </Grid>\n\n        <Snackbar\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left'\n          }}\n          open={isSorted}\n          autoHideDuration={3000}\n          onClose={handleClose}\n          message=\"Sorting completed!\"\n        />\n      </Container>\n    </React.Fragment >\n  );\n}\n\nexport default Visualizer\n","import React from 'react'\nimport './Navbar.css'\nimport { AppBar, Toolbar, FormControl, FormControlLabel, RadioGroup, Radio, Typography, Grid } from '@material-ui/core'\n\nconst Navbar = (props) => {\n  const { algorithm, updateAlgorithm } = props\n\n  const handleClick = (algorithm) => {\n    updateAlgorithm(algorithm)\n  }\n\n  return (\n    <AppBar position=\"fixed\">\n      <Toolbar>\n        <Typography variant=\"h6\">Logo</Typography>\n\n        <Grid item xs={12}>\n          <FormControl component=\"fieldset\">\n            <RadioGroup\n              row\n              aria-label=\"algorithm\"\n              name=\"algorithm\"\n            >\n              <FormControlLabel value=\"BubbleSort\" control={<Radio />} label=\"BubbleSort\" onClick={() => handleClick(\"bubbleSort\")} />\n              <FormControlLabel value=\"MergeSort\" control={<Radio />} label=\"MergeSort\" onClick={() => handleClick('mergeSort')} />\n              <FormControlLabel value=\"QuickSort\" control={<Radio />} label=\"QuickSort\" onClick={() => handleClick('quickSort')} />\n              {/* <FormControlLabel value=\"InsertionSort\" control={<Radio />} label=\"InsertionSort\" />\n              <FormControlLabel value=\"SelectionSort\" control={<Radio />} label=\"SelectionSort\" /> */}\n            </RadioGroup>\n          </FormControl>\n        </Grid>\n      </Toolbar>\n    </AppBar>\n  )\n}\n\nexport default Navbar","import { createAction, handleActions } from 'redux-actions'\n\nconst initialState = []\n\nexport const SET_ARRAY = 'SET_ARRAY'\nexport const setArray = createAction(SET_ARRAY)\n\nexport const array = handleActions({\n  SET_ARRAY: (state, { payload }) => {\n    return payload\n  }\n}, initialState)","import { createAction, handleActions } from 'redux-actions'\n\nconst initialState = ''\n\nexport const SET_ALGORITHM = 'SET_ALGORITHM'\nexport const setAlgorithm = createAction(SET_ALGORITHM)\n\nexport const algorithm = handleActions({\n  SET_ALGORITHM: (state, { payload }) => {\n    return payload\n  }\n}, initialState)","import { createAction, handleActions } from 'redux-actions'\n\nconst initialState = []\n\nexport const SET_CURRENT_SORTED = 'SET_CURRENT_SORTED'\nexport const setCurrentSorted = createAction(SET_CURRENT_SORTED)\n\nexport const currentSorted = handleActions({\n  SET_CURRENT_SORTED: (state, { payload }) => {\n    return payload.length ? state.concat(payload) : []\n  }\n}, initialState)","import { connect } from 'react-redux'\nimport Navbar from './Navbar'\nimport { setArray } from '../../reducers/array'\nimport { setAlgorithm } from '../../reducers/algorithm'\nimport { setCurrentSorted } from '../../reducers/sorted'\nimport { generateRandomArray } from '../../utility/Util'\n\nconst mapStateToProps = ({ algorithm }) => ({ algorithm })\nconst mapDispatchToProps = () => dispatch => ({\n  generateArray: length => {\n    const array = generateRandomArray(length)\n    dispatch(setArray(array))\n    dispatch(setCurrentSorted([]))\n  },\n  updateAlgorithm: algorithm => {\n    dispatch(setAlgorithm(algorithm))\n  }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Navbar)","import React from 'react';\nimport { motion } from \"framer-motion\";\nimport { springAnimation } from '../../utility/Util';\n\nconst liStyle = {\n  marginTop: 8,\n  marginBottom: 8,\n  marginLeft: 4,\n  marginRight: 4,\n  borderRadius: 5,\n  listStyle: 'none',\n  color: 'white',\n  fontSize: '26px',\n  textAlign: 'center',\n  alignItems: 'center',\n  display: 'grid'\n}\n\nconst Chart = (props) => {\n  const { array, currentSwapper, currentBubbleSortTwo, currentMergeSort, currentSorted, currentQuickSort, pivot } = props\n  let liHeight = Math.floor((window.innerHeight / 2) / 100);\n  let liWidth = 32;\n\n  return (\n    <div style={{ display: 'inline-flex', justifyItems: 'center', alignItems: 'flex-end', height: '350px' }}>\n      {array.length ? array.map((number, index) => {\n        let backgroundColor;\n        if (currentSwapper.includes(index)) {\n          backgroundColor = \"#DB3939\"\n        } else if (currentBubbleSortTwo.includes(index) || currentMergeSort.includes(index) || currentQuickSort.includes(index)) {\n          backgroundColor = \"#4ED860\"\n        } else if (pivot === index) {\n          backgroundColor = '#EDEA3B'\n        } else if (currentSorted.includes(index)) {\n          backgroundColor = \"#A95CE8\"\n        } else {\n          backgroundColor = \"#4286F4\"\n        }\n\n        return (\n          <motion.div\n            key={index}\n            animate={{ scale: [1, 1.1, 1] }}\n            layoutTransition={springAnimation}\n            style={{\n              ...liStyle,\n              background: backgroundColor,\n              width: liWidth,\n              height: liHeight * (number + 10),\n            }}>\n            <h6 style={{ margin: 0 }}>{number}</h6>\n          </motion.div>\n        )\n      }) : null}\n    </div>\n  )\n}\n\nexport default Chart;","import React, { useState, useRef, useEffect, useCallback } from 'react'\nimport Chart from '../Chart/Chart'\nimport { Container, Grid, Snackbar, Typography, FormControl, RadioGroup, FormControlLabel, Radio, TextField, Button, IconButton, Collapse } from '@material-ui/core'\nimport { Alert } from '@material-ui/lab';\nimport CloseIcon from '@material-ui/icons/Close'\nimport { debounce } from 'lodash'\n\nconst Body = (props) => {\n  const [inputType, setInputType] = useState('DefaultInput');\n  const [speed, setSpeed] = useState(1000);\n  const [customNumbers, setCustomNumbers] = useState([]);\n  const [open, setOpen] = React.useState({\n    isOpen: false,\n    text: ''\n  })\n  const minItems = 4;\n  const maxItems = 30;\n  const { array, currentBubbleSortTwo, currentMergeSort, currentQuickSort, pivot, currentSwapper, currentSorted, generateArray, generateCustomArray, isRunning, isEnding, sort, algorithm, close } = props\n  const customRef = useRef(null)\n\n  const color = isRunning ? \"rgba(214, 29, 29, 0.8)\" : \"gray\"\n  const cursor = isRunning ? 'auto' : 'pointer'\n\n  useEffect(() => {\n    generateArray(5)\n  }, [generateArray])\n\n  const delayHandleChange = useCallback(debounce((newValue) => {\n    generateArray(newValue)\n  }, 16), [])\n\n  const handleChange = (e) => {\n    delayHandleChange(e.target.value)\n  }\n\n  const changeSpeed = (e) => {\n    const newSpeed = e.target.value;\n    if (newSpeed < 0 || newSpeed > 1000) {\n      setOpen({\n        ...open,\n        isOpen: true,\n        text: 'Speed should be between 0 and 1000 ms!'\n      })\n    } else {\n      setSpeed(newSpeed);\n    }\n  }\n\n  const customInput = (e) => {\n    let input = e.target.value.split(' ').map((number) => parseInt(number, 10));\n    setCustomNumbers(input);\n  }\n\n  const submit = () => {\n    const customItems = []\n    for (let i = 0; i < customNumbers.length; i++) {\n      customItems.push(customNumbers[i]);\n    }\n    generateCustomArray(customItems)\n  }\n\n  const handleClose = () => {\n    close()\n  }\n\n  const setAlert = () => {\n    setOpen({\n      ...open,\n      isOpen: true,\n      text: 'please select one algorithm'\n    })\n  }\n\n  return (\n    <>\n      <Collapse in={open.isOpen} style={{ position: 'relative', top: '64px', }}>\n        <Alert\n          severity=\"info\"\n          action={\n            <IconButton\n              aria-label=\"close\"\n              color=\"inherit\"\n              size=\"small\"\n              onClick={() => {\n                setOpen({\n                  ...open,\n                  isOpen: false\n                });\n              }}\n            >\n              <CloseIcon fontSize=\"inherit\" />\n            </IconButton>\n          }\n        >\n          {open.text}\n        </Alert>\n      </Collapse>\n      <Container maxWidth=\"lg\" style={{ height: '100vh', display: 'flex', alignItems: 'center' }}>\n        <Grid container justify=\"center\" style={{\n          maxHeight: '500px'\n        }}>\n          {inputType === 'DefaultInput' && (\n            <Grid item xs={12}>\n              <Typography component=\"h4\" variant=\"h4\">\n                Number of items: {array.length}\n              </Typography>\n            </Grid>\n          )}\n\n          {inputType === 'DefaultInput' && (\n            <Grid item xs={12}>\n              <span\n                style={{ color: color }}>\n                Change items size\n              </span>\n              <input\n                type=\"range\"\n                min={minItems}\n                max={maxItems}\n                step=\"1\"\n                style={{ background: color, cursor: cursor }}\n                disabled={isRunning ? \"disabled\" : null}\n                onChange={handleChange}\n                value={array.length}\n              />\n            </Grid>\n          )}\n\n          <Grid item xs={12}>\n            <FormControl component=\"fieldset\">\n              <RadioGroup\n                row\n                aria-label=\"input-type\"\n                name=\"input-type\"\n                value={inputType}\n                onChange={(e) => setInputType(e.target.value)}\n              >\n                <FormControlLabel value=\"CustomInput\" control={<Radio />} label=\"Custom Input\" />\n                <FormControlLabel value=\"DefaultInput\" control={<Radio />} label=\"Default Input\" />\n              </RadioGroup>\n            </FormControl>\n          </Grid>\n          {inputType === 'CustomInput' && (\n            <Grid item xs={12} style={{ display: 'flex', justifyContent: 'center' }}>\n              <Grid item xs={10}>\n                <TextField\n                  id=\"custom_input\"\n                  type=\"text\"\n                  placeholder=\"Insert space separated numbers. ex: 23 7 12 90\"\n                  style={{ width: '100%', marginBottom: '20px' }}\n                  ref={customRef}\n                  onChange={customInput}\n                />\n              </Grid>\n\n              <Grid item xs={2}>\n                <Button disabled={isRunning} variant=\"contained\" color=\"primary\" onClick={() => submit()}>\n                  Done!\n              </Button>\n              </Grid>\n            </Grid>\n          )}\n\n          <Grid item xs={6} style={{ display: 'flex', justifyContent: 'space-between' }}>\n            <Grid item xs={2}>\n              <Button color=\"secondary\" variant=\"contained\" onClick={!isRunning ? () => generateArray(array.length) : null} disabled={isRunning}>\n                RESET\n              </Button>\n            </Grid>\n\n            <Grid item xs={2}>\n              <Button\n                disabled={isRunning}\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={algorithm ? () => sort(algorithm, array, speed) : setAlert}\n              >\n                Sort!\n              </Button>\n            </Grid>\n\n            <Grid item xs={2}>\n              <TextField\n                id=\"standard-number\"\n                label=\"Speed (ms)\"\n                type=\"number\"\n                InputLabelProps={{\n                  shrink: true\n                }}\n                value={speed}\n                onChange={changeSpeed}\n              />\n            </Grid>\n          </Grid>\n\n          <Grid item xs={12}>\n            <Chart array={array} currentSwapper={currentSwapper} currentBubbleSortTwo={currentBubbleSortTwo} currentMergeSort={currentMergeSort} currentSorted={currentSorted} currentQuickSort={currentQuickSort} pivot={pivot} />\n          </Grid>\n        </Grid>\n\n        <Snackbar\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left'\n          }}\n          open={isEnding}\n          autoHideDuration={3000}\n          onClose={handleClose}\n          message=\"Sorting completed!\"\n          action={\n            <React.Fragment>\n              <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\n                <CloseIcon fontSize=\"small\" />\n              </IconButton>\n            </React.Fragment>\n          }\n        />\n      </Container>\n    </>\n  )\n}\n\nexport default Body","import { createAction, handleActions } from 'redux-actions'\n\nconst initialState = false\n\nexport const SET_RUNNING = 'SET_RUNNING'\nexport const setRunning = createAction(SET_RUNNING)\n\nexport const isRunning = handleActions({\n  SET_RUNNING: (state, { payload }) => {\n    return payload\n  }\n}, initialState)","import { createAction, handleActions } from 'redux-actions'\n\nconst initialState = false\n\nexport const SET_ENDING = 'SET_ENDING'\nexport const setEnding = createAction(SET_ENDING)\n\nexport const isEnding = handleActions({\n  SET_ENDING: (state, { payload }) => {\n    return payload\n  }\n}, initialState)","import { createAction, handleActions } from 'redux-actions'\n\nconst initialState = []\n\nexport const SET_CURRENT_BUBBLE_TWO = 'SET_CURRENT_BUBBLE_TWO'\nexport const setCurrentBubbleTwo = createAction(SET_CURRENT_BUBBLE_TWO)\n\nexport const currentBubbleSortTwo = handleActions({\n  SET_CURRENT_BUBBLE_TWO: (state, { payload }) => {\n    return payload\n  }\n}, initialState)","import { createAction, handleActions } from 'redux-actions'\n\nconst initialState = []\n\nexport const SET_CURRENT_SWAPPER = 'SET_CURRENT_SWAPPER'\nexport const setCurrentSwapper = createAction(SET_CURRENT_SWAPPER)\n\nexport const currentSwapper = handleActions({\n  SET_CURRENT_SWAPPER: (state, { payload }) => {\n    return payload.length ? state.concat(payload) : []\n  }\n}, initialState)","import { setArray } from '../../reducers/array'\nimport { setCurrentBubbleTwo } from '../../reducers/bubbleSort'\nimport { setCurrentSwapper } from '../../reducers/swapper'\nimport { setCurrentSorted } from '../../reducers/sorted'\nimport { setRunning } from '../../reducers/running'\nimport { setEnding } from '../../reducers/isEnd'\n\nfunction bubbleSort(stateArray, dispatch, speed) {\n  let array = stateArray.slice(0)\n  let toDispatch = []\n  let sorted = false\n  let round = 0\n\n  while (!sorted) {\n    sorted = true\n    for (let i = 0; i < array.length - 1 - round; i++) {\n      toDispatch.push([i, i + 1])\n      if (array[i] > array[i + 1]) {\n        toDispatch.push([i, i + 1, true])\n        const temp = array[i]\n        array[i] = array[i + 1]\n        array[i + 1] = temp\n        sorted = false\n        toDispatch.push(array.slice(0))\n        toDispatch.push([])\n      }\n    }\n    toDispatch.push([true, array.length - 1 - round])\n    round++\n  }\n  handleDispatch(toDispatch, dispatch, array, speed)\n  return array\n}\n\nfunction handleDispatch(toDispatch, dispatch, array, speed) {\n  if (!toDispatch.length) {\n    dispatch(setCurrentBubbleTwo(array.map((num, index) => index)))\n    setTimeout(() => {\n      dispatch(setCurrentBubbleTwo([]))\n      dispatch(setCurrentSorted(array.map((num, index) => index)))\n      dispatch(setRunning(false))\n      dispatch(setEnding(true))\n    }, 1000)\n    return\n  }\n\n  let dispatchFunction\n\n  if (toDispatch[0].length > 3) {\n    dispatchFunction = setArray\n  } else if (toDispatch[0].length === 3 || toDispatch[0].length === 0) {\n    dispatchFunction = setCurrentSwapper\n  } else if (toDispatch[0].length === 2 && typeof toDispatch[0][0] === 'boolean') {\n    dispatchFunction = setCurrentSorted\n  } else {\n    dispatchFunction = setCurrentBubbleTwo\n  }\n\n  dispatch(dispatchFunction(toDispatch.shift()))\n\n  setTimeout(() => {\n    handleDispatch(toDispatch, dispatch, array, speed)\n  }, speed)\n}\n\nexport default bubbleSort","import { createAction, handleActions } from 'redux-actions'\n\nconst initialState = []\n\nexport const SET_CURRENT_MERGE = 'SET_CURRENT_MERGE'\nexport const setCurrentMerge = createAction(SET_CURRENT_MERGE)\n\nexport const currentMergeSort = handleActions({\n  SET_CURRENT_MERGE: (state, { payload }) => {\n    return payload\n  }\n}, initialState)","import { setArray } from '../../reducers/array'\nimport { setCurrentMerge } from '../../reducers/mergeSort'\nimport { setCurrentSwapper } from '../../reducers/swapper'\nimport { setRunning } from '../../reducers/running'\nimport { setEnding } from '../../reducers/isEnd'\nimport { setCurrentSorted } from '../../reducers/sorted'\n\nfunction mergeSort(stateArray, dispatch, speed) {\n  let array = stateArray.slice(0)\n  let toDispatch = []\n  let finalArray = mergeSortHelper(array.map((num, index) => [num, index]), toDispatch, 0, array.length - 1, { array: array.slice(0) })\n  handleDispatch(toDispatch, dispatch, finalArray, speed)\n}\n\nfunction mergeSortHelper(array, toDispatch, start, end, obj) {\n  if (array.length === 1) return array\n\n  let half = Math.floor(array.length / 2)\n  let first = array.slice(0, half)\n  let second = array.slice(half)\n  let indexHalf = Math.floor((start + end + 1) / 2)\n  let actualFirst = mergeSortHelper(first, toDispatch, start, indexHalf - 1, obj)\n  let actualSecond = mergeSortHelper(second, toDispatch, indexHalf, end, obj)\n  let isFinalMerge = false\n\n  if (actualFirst.length + actualSecond.length === obj.array.length) {\n    isFinalMerge = true\n  }\n\n  return actualSort(actualFirst, actualSecond, toDispatch, obj, start, end, isFinalMerge)\n}\n\nfunction actualSort(first, second, toDispatch, obj, start, end, isFinalMerge) {\n  let sortedArray = []\n  let indexToPush = start\n\n  while (first.length && second.length) {\n    toDispatch.push([first[0][1], second[0][1]])\n    if (first[0][0] <= second[0][0]) {\n      indexToPush++\n      sortedArray.push(first.shift())\n    } else {\n      toDispatch.push([first[0][1], second[0][1], true])\n      second[0][1] = indexToPush++\n      sortedArray.push(second.shift())\n      first.forEach(subArr => subArr[1]++)\n      if (start === 0) {\n        obj.array = sortedArray.map(subArr => subArr[0]).concat(first.map(subArr => subArr[0])).concat(second.map(subArr => subArr[0])).concat(obj.array.slice(end + 1))\n      } else {\n        obj.array = obj.array.slice(0, start).concat(sortedArray.map(subArr => subArr[0])).concat(first.map(subArr => subArr[0])).concat(second.map(subArr => subArr[0])).concat(obj.array.slice(end + 1))\n      }\n      toDispatch.push(obj.array.concat([indexToPush - 1, indexToPush]))\n      toDispatch.push([])\n    }\n    if (isFinalMerge) {\n      toDispatch.push([true, indexToPush - 1])\n    }\n  }\n\n  return sortedArray.concat(first).concat(second)\n}\n\nfunction handleDispatch(toDispatch, dispatch, array, speed) {\n  if (!toDispatch.length) {\n    dispatch(setCurrentMerge(array.map((num, index) => index)))\n    setTimeout(() => {\n      dispatch(setCurrentMerge([]))\n      dispatch(setCurrentSorted(array.map((num, index) => index)))\n      dispatch(setRunning(false))\n      dispatch(setEnding(true))\n    }, 1000)\n    return\n  }\n\n  let dispatchFunction\n\n  if (toDispatch[0].length > 3) {\n    dispatchFunction = setArray\n  } else if ((toDispatch[0].length === 3 && typeof toDispatch[0][2] === 'boolean') || toDispatch[0].length === 0) {\n    dispatchFunction = setCurrentSwapper\n  } else if (toDispatch[0].length === 2 && typeof toDispatch[0][0] === 'boolean') {\n    dispatchFunction = setCurrentSorted\n  } else {\n    dispatchFunction = setCurrentMerge\n  }\n\n  if (dispatchFunction === setArray) {\n    let currentToDispatch = toDispatch.shift()\n    dispatch(dispatchFunction(currentToDispatch.slice(0, currentToDispatch.length - 2)))\n    dispatch(setCurrentSwapper([]))\n    dispatch(setCurrentMerge([]))\n    dispatch(setCurrentSwapper([currentToDispatch[currentToDispatch.length - 2], currentToDispatch[currentToDispatch.length - 1]]))\n    dispatch(setCurrentMerge([currentToDispatch[currentToDispatch.length - 2], currentToDispatch[currentToDispatch.length - 1]]))\n  } else {\n    dispatch(dispatchFunction(toDispatch.shift()))\n  }\n\n  setTimeout(() => {\n    handleDispatch(toDispatch, dispatch, array, speed)\n  }, speed)\n}\n\nexport default mergeSort","import { createAction, handleActions } from 'redux-actions'\n\nconst initialStateOne = []\nconst initialStateTwo = null\n\nexport const SET_CURRENT_QUICK_SORT = 'SET_CURRENT_QUICK_SORT'\nexport const setCurrentQuickSort = createAction(SET_CURRENT_QUICK_SORT)\nexport const SET_PIVOT = 'SET_PIVOT'\nexport const setPivot = createAction(SET_PIVOT)\n\nexport const currentQuickSort = handleActions({\n  SET_CURRENT_QUICK_SORT: (state, { payload }) => {\n    return payload\n  }\n}, initialStateOne)\n\nexport const pivot = handleActions({\n  SET_PIVOT: (state, { payload }) => {\n    return payload\n  }\n}, initialStateTwo)","import { setArray } from '../../reducers/array'\nimport { setCurrentQuickSort, setPivot } from '../../reducers/quickSort'\nimport { setCurrentSwapper } from '../../reducers/swapper'\nimport { setCurrentSorted } from '../../reducers/sorted'\nimport { setRunning } from '../../reducers/running'\nimport { setEnding } from '../../reducers/isEnd'\n\nfunction quickSort(stateArray, dispatch, speed) {\n  let array = stateArray.slice(0)\n  let toDispatch = []\n\n  quickSortHelper(array, 0, array.length - 1, toDispatch)\n  handleDispatch(toDispatch, dispatch, array, speed)\n  return array\n}\n\nfunction quickSortHelper(array, start, end, toDispatch) {\n  if (start >= end) {\n    toDispatch.push([true, start])\n    return\n  }\n\n  let pivot = start\n  let left = start + 1\n  let right = end\n\n  toDispatch.push(pivot)\n  toDispatch.push([left, right])\n\n  while (right >= left) {\n    if (array[right] < array[pivot] && array[left] > array[pivot]) {\n      toDispatch.push([left, right, true])\n      const temp = array[right]\n      array[right] = array[left]\n      array[left] = temp\n      toDispatch.push(array.slice(0))\n      toDispatch.push([])\n    }\n    if (array[right] >= array[pivot]) {\n      right--\n    }\n    if (array[left] <= array[pivot]) {\n      left++\n    }\n    if (right >= left) {\n      toDispatch.push([left, right])\n    }\n  }\n  toDispatch.push([pivot, right])\n  if (pivot !== right) {\n    const temp = array[right]\n    array[right] = array[pivot]\n    array[pivot] = temp\n    toDispatch.push([pivot, right, true])\n    toDispatch.push(array.slice(0))\n    toDispatch.push([])\n    toDispatch.push([true, right])\n  }\n  quickSortHelper(array, start, right - 1, toDispatch)\n  quickSortHelper(array, right + 1, end, toDispatch)\n}\n\nfunction handleDispatch(toDispatch, dispatch, array, speed) {\n  if (!toDispatch.length) {\n    dispatch(setPivot(null))\n    dispatch(setCurrentQuickSort(array.map((num, index) => index)))\n    setTimeout(() => {\n      dispatch(setCurrentQuickSort([]))\n      dispatch(setRunning(false))\n      dispatch(setEnding(true))\n    }, 1000)\n    return\n  }\n\n  let dispatchFunction\n\n  if (!(toDispatch[0] instanceof Array)) {\n    dispatchFunction = setPivot\n  } else if (toDispatch[0].length > 3) {\n    dispatchFunction = setArray\n  } else if (toDispatch[0].length !== 2) {\n    dispatchFunction = setCurrentSwapper\n  } else if (toDispatch[0].length === 2 && typeof toDispatch[0][0] === 'boolean') {\n    dispatchFunction = setCurrentSorted\n  } else {\n    dispatchFunction = setCurrentQuickSort\n  }\n\n  dispatch(dispatchFunction(toDispatch.shift()))\n  if (dispatchFunction === setPivot) {\n    dispatch(setCurrentQuickSort(toDispatch.shift()))\n  }\n  setTimeout(() => {\n    handleDispatch(toDispatch, dispatch, array, speed)\n  }, speed)\n}\n\nexport default quickSort","import { connect } from 'react-redux'\nimport Body from './Body'\nimport { setArray } from '../../reducers/array'\nimport { setAlgorithm } from '../../reducers/algorithm'\nimport { setCurrentSorted } from '../../reducers/sorted'\nimport { generateRandomArray } from '../../utility/Util'\nimport { setRunning } from '../../reducers/running'\nimport { setEnding } from '../../reducers/isEnd'\nimport bubbleSort from '../../algorithms/sorting/bubbleSort'\nimport mergeSort from '../../algorithms/sorting/mergeSort'\nimport quickSort from '../../algorithms/sorting/quickSort'\n\nconst mapStateToProps = ({ array, currentBubbleSortTwo, currentMergeSort, currentQuickSort, pivot, currentSwapper, currentSorted, isRunning, isEnding, algorithm }) => ({ array, currentBubbleSortTwo, currentMergeSort, currentQuickSort, pivot, currentSwapper, currentSorted, isRunning, isEnding, algorithm })\n\nconst mapDispatchToProps = () => dispatch => ({\n  generateArray: length => {\n    const array = generateRandomArray(length)\n    dispatch(setArray(array))\n    dispatch(setCurrentSorted([]))\n  },\n  generateCustomArray: array => {\n    dispatch(setArray(array))\n    dispatch(setCurrentSorted([]))\n  },\n  updateAlgorithm: algorithm => {\n    dispatch(setAlgorithm(algorithm))\n  },\n  sort: (algorithm, array, speed) => {\n    let doSort\n    if (algorithm === 'bubbleSort') {\n      doSort = bubbleSort\n    } else if (algorithm === 'mergeSort') {\n      doSort = mergeSort\n    } else if (algorithm === 'quickSort') {\n      doSort = quickSort\n    } else {\n      return\n    }\n\n    dispatch(setCurrentSorted([]))\n    dispatch(setRunning(true))\n    doSort(array, dispatch, speed)\n  },\n  close: () => {\n    dispatch(setEnding(false))\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Body)","import React from 'react'\nimport Navbar from './Navbar/NavbarContainer'\nimport Body from './Body/BodyContainer'\nimport './Main.css'\n\nconst Main = () => {\n  return (\n    <React.Fragment>\n      <Navbar />\n      <Body />\n    </React.Fragment>\n  )\n}\n\nexport default Main","import React from 'react';\nimport Visualizer from './components/Visualizer';\nimport Main from './components/Main'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <Visualizer /> */}\n      <Main />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux'\nimport { array } from './array'\nimport { algorithm } from './algorithm'\nimport { currentSwapper } from './swapper'\nimport { currentSorted } from './sorted'\nimport { isRunning } from './running'\nimport { isEnding } from './isEnd'\nimport { currentBubbleSortTwo } from './bubbleSort'\nimport { currentMergeSort } from './mergeSort'\nimport { currentQuickSort, pivot } from './quickSort'\n\nconst rootReducer = combineReducers({\n  array,\n  algorithm,\n  currentSwapper,\n  currentSorted,\n  isRunning,\n  isEnding,\n  currentBubbleSortTwo,\n  currentMergeSort,\n  currentQuickSort,\n  pivot\n})\n\nexport default rootReducer","import { createStore } from 'redux'\nimport rootReducer from './reducers'\n\nexport default createStore(rootReducer)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}